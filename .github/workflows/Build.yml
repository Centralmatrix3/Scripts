name: Build

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0,12 * * *"

jobs:
  Build:
    runs-on: ubuntu-latest
    env:
      TZ: "Asia/Shanghai"

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4.2.1
      with:
        repository: Centralmatrix3/Scripts
        path: Scripts-repo

    - name: Source
      run: |
        curl https://raw.githubusercontent.com/Centralmatrix3/Scripts/master/Scripts/Source.sh | sh
        for file in Scripts-repo/Ruleset/*.list Scripts-repo/*/Ruleset/*.{list,yaml}; do
          if [ -f "$file" ]; then
            sed -i -e '/^\s*[#;]/d' -e '/^$/d' -e 's| //.*||'  "$file"
            sed -i -e '/PROCESS-NAME\|URL-REGEX\|USER-AGENT/d' "$file"
          else
            echo "$file not found."
          fi
        done

    - name: Ruleset
      run: |
        cd Scripts-repo/Ruleset
        for file in Global.list; do
          if [ -f "$file" ]; then
            sed -i -e 's/DOMAIN,cloud.oracle.com/DOMAIN-SUFFIX,oracle.com/g' "$file"
            sed -i -e '/DOMAIN,steambroadcast.akamaized.net/d' "$file"
            sed -i -e '/DOMAIN,steamcommunity-a.akamaihd.net/d' "$file"
            sed -i -e '/DOMAIN,steampipe.akamaized.net/d' "$file"
            sed -i -e '/DOMAIN,steamstore-a.akamaihd.net/d' "$file"
            sed -i -e '/DOMAIN,steamusercontent-a.akamaihd.net/d' "$file"
            sed -i -e '/DOMAIN,steamuserimages-a.akamaihd.net/d' "$file"
          else
            echo "$file not found."
          fi
        done

        for file in *.list; do
          if [ -f "$file" ]; then
            sed -i -E '/^IP-CIDR,/!{/^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\/[0-9]+/s/^/IP-CIDR,/}' "$file"
            sed -i -E '/^IP-CIDR6,/!{/^[a-fA-F0-9]+:|([a-fA-F0-9]+:+)+[a-fA-F0-9]+\/[0-9]+/s/^/IP-CIDR6,/}' "$file"
            awk '
            /^DOMAIN,/         { print "0 " $0; next }
            /^DOMAIN-SUFFIX,/  { print "1 " $0; next }
            /^DOMAIN-KEYWORD,/ { print "2 " $0; next }
            /^DOMAIN-WILDCARD,/{ print "3 " $0; next }
            /^IP-CIDR,/        { print "4 " $0; next }
            /^IP-CIDR6,/       { print "5 " $0; next }
            /^IP-ASN,/         { print "6 " $0; next }
            /^GEOIP,/          { print "7 " $0; next }
                               { print "8 " $0; next }
            ' "$file" | sort -k1,1n -k2,2 | cut -d' ' -f2- > "$file.sorted" && mv "$file.sorted" "$file"
            awk '!seen[tolower($0)]++' "$file" > temp && mv temp "$file"
            file_names=$(basename "$file" .list)
            line_count=$(wc -l < "$file")
            awk -v fname="$file_names" 'NR==1 {print "# 规则名称: " fname} {print}' "$file" > tmpfile && mv tmpfile "$file"
            awk -v count="$line_count" 'NR==2 {print "# 规则统计: " count} {print}' "$file" > tmpfile && mv tmpfile "$file"
            sed -i '2a\\' "$file"
          else
            echo "$file not found."
          fi
        done

    - name: QuantumultX
      run: |
        cd Scripts-repo/QuantumultX/Ruleset
        for file in {AdBlock,Advertising}.list; do
          if [ -f "$file" ]; then
            sed -i -e 's/^DOMAIN-SUFFIX,/HOST-SUFFIX,/g' "$file"
            file_names=$(basename "$file" .list)
            awk -v policy="$file_names" '{print $0","policy; next} {print}' "$file" > tmpfile && mv tmpfile "$file"
          else
            echo "$file not found."
          fi
        done

        for file in *.list; do
          if [ -f "$file" ]; then
            awk '
            /^HOST,/         { print "0 " $0; next }
            /^HOST-SUFFIX,/  { print "1 " $0; next }
            /^HOST-KEYWORD,/ { print "2 " $0; next }
            /^HOST-WILDCARD,/{ print "3 " $0; next }
            /^IP-CIDR,/      { print "4 " $0; next }
            /^IP6-CIDR,/     { print "5 " $0; next }
            /^IP-ASN,/       { print "6 " $0; next }
            /^GEOIP,/        { print "7 " $0; next }
                             { print "8 " $0; next }
            ' "$file" | sort -k1,1n -k2,2 | cut -d' ' -f2- > "$file.sorted" && mv "$file.sorted" "$file"
            awk '!seen[tolower($0)]++' "$file" > temp && mv temp "$file"
            file_names=$(basename "$file" .list)
            line_count=$(wc -l < "$file")
            awk -v fname="$file_names" 'NR==1 {print "# 规则名称:" fname} {print}' "$file" > tmpfile && mv tmpfile "$file"
            awk -v count="$line_count" 'NR==2 {print "# 规则统计:" count} {print}' "$file" > tmpfile && mv tmpfile "$file"
            sed -i '2a\\' "$file"
          else
            echo "$file not found."
          fi
        done

    - name: Stash
      run: |
        cd Scripts-repo/Stash/Ruleset
        for file in {AdBlock,Advertising}.yaml; do
          if [ -f "$file" ]; then
            sed -i -e 's/^DOMAIN,//' -e 's/^DOMAIN-SUFFIX,/+./g' "$file"
            awk '{print "  - \x27" $0 "\x27"; next} {print}' "$file" > tmpfile && mv tmpfile "$file"
            grep -q "^payload:" "$file" || sed -i '1i payload:'  "$file"
          else
            echo "$file not found."
          fi
        done

        for file in *.yaml; do
          if [ -f "$file" ]; then
            awk '
            /^payload:/           { print "0 " $0; next }
            /^  - DOMAIN,/        { print "1 " $0; next }
            /^  - DOMAIN-SUFFIX,/ { print "2 " $0; next }
            /^  - DOMAIN-KEYWORD,/{ print "3 " $0; next }
            /^  - IP-CIDR,/       { print "4 " $0; next }
            /^  - IP-CIDR6,/      { print "5 " $0; next }
            /^  - IP-ASN,/        { print "6 " $0; next }
            /^  - GEOIP,/         { print "7 " $0; next }
                                  { print "8 " $0; next } # /^\s*- '\''\+\./ { print "9 " $0; next }
            ' "$file" | sort -k1,1n -k2,2 | cut -d' ' -f2- > "$file.sorted" && mv "$file.sorted" "$file"
            awk '!seen[tolower($0)]++' "$file" > temp && mv temp "$file"
            file_names=$(basename "$file" .yaml)
            line_count=$(tail -n +2 "$file" | wc -l)
            awk -v fname="$file_names" 'NR==1 {print "# 规则名称:" fname} {print}' "$file" > tmpfile && mv tmpfile "$file"
            awk -v count="$line_count" 'NR==2 {print "# 规则统计:" count} {print}' "$file" > tmpfile && mv tmpfile "$file"
            sed -i '2a\\' "$file"
          else
            echo "$file not found."
          fi
        done

    - name: Surge
      run: |
        cd Scripts-repo/Surge/Ruleset
        for file in *.list; do
          if [ -f "$file" ]; then
            awk '
            /^DOMAIN,/         { print "0 " $0; next }
            /^DOMAIN-SUFFIX,/  { print "1 " $0; next }
            /^DOMAIN-KEYWORD,/ { print "2 " $0; next }
            /^DOMAIN-WILDCARD,/{ print "3 " $0; next }
            /^IP-CIDR,/        { print "4 " $0; next }
            /^IP-CIDR6,/       { print "5 " $0; next }
            /^IP-ASN,/         { print "6 " $0; next }
            /^GEOIP,/          { print "7 " $0; next }
                               { print "8 " $0; next }
            ' "$file" | sort -k1,1n -k2,2 | cut -d' ' -f2- > "$file.sorted" && mv "$file.sorted" "$file"
            awk '!seen[tolower($0)]++' "$file" > temp && mv temp "$file"
            file_names=$(basename "$file" .list)
            line_count=$(wc -l < "$file")
            awk -v fname="$file_names" 'NR==1 {print "# 规则名称:" fname} {print}' "$file" > tmpfile && mv tmpfile "$file"
            awk -v count="$line_count" 'NR==2 {print "# 规则统计:" count} {print}' "$file" > tmpfile && mv tmpfile "$file"
            sed -i '2a\\' "$file"
          else
            echo "$file not found."
          fi
        done

    - name: Push Update
      run: |
        cd Scripts-repo
          if [[ -n $(git status -s) ]]; then
            git config --local user.email "${{ github.actor }}@users.noreply.github.com"
            git config --local user.name "${{ github.actor }}"
            git add -A
            git commit -m "$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
            git push origin master
          else
            echo "No changes to commit."
          fi

    - name: Cleanup Workflow
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2